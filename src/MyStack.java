import java.util.Scanner; public class MyStack<E> {private MyLinkedListNode<E> top; private int size; public MyStack() {top = null; size = 0; } public int getSize() {return size; } public void push(E val) {MyLinkedListNode<E> newItem = new MyLinkedListNode<E>(val); newItem.next = top; top = newItem; size++; } public E pop() {if(top != null) {E data = top.value; top = top.next; size--; return data; } else return null; } public E top() {if(top != null) return top.value; else return null; } public E peek() {return top(); } public static int operandPriority(String x) {if (x == null) return 5; if (x.equals("(")) return 0; if (x.equals("+") || x.equals("-")) return 1; if (x.equals("*") || x.equals("/") || x.equals("%")) return 2; if (x.equals("^")) return 3; else return 4; } public static boolean getOp(char c) {if (c == '*' || c == '/' || c == '^' || c == '+' || c == '-' || c == '%') return true; return false; } public static String toIn() {String output = ""; System.out.println("Enter a postfix equation.\n:"); Scanner scan = new Scanner(System.in); String postfix = scan.nextLine(); MyStack<String> symbols = new MyStack<>(); for (int i = 0; i < postfix.length(); i++) {char c = postfix.charAt(i); if (getOp(c) == true) {String a = symbols.pop(); String b = symbols.pop(); symbols.push("("+b+c+a+")"); } else {symbols.push(""+c); } } output += symbols.pop(); return output; } public static String toPost() {System.out.println("Enter an infix equation.\n:"); Scanner scan = new Scanner(System.in); String infix = scan.nextLine(); String output = ""; MyStack<String> symbols = new MyStack<>(); for (int i = 0; i < infix.length(); i++) {String x = infix.substring(i, i+1); if(x.equals("(")) symbols.push(x); else {if(x.equals(")")) while(!symbols.peek().equals("(")) output += symbols.pop(); else {while(operandPriority(x) <= operandPriority(symbols.peek()) && symbols.peek() != null) {output += symbols.pop(); } symbols.push(x); } } } while(symbols.peek() != null) {if (symbols.peek().equals("(")) symbols.pop(); else output += symbols.pop(); } return output; } public static double solvePost() {System.out.println("Enter a solvable postfix equation: "); Scanner scan = new Scanner(System.in); String postfix = scan.nextLine(); MyStack<String> t = new MyStack<>(); System.out.println("You entered: "+postfix); MyStack<Double> s = new MyStack<>(); double result = 0; try {for (int i=0; i<postfix.length(); i++) {char c = postfix.charAt(i); if (isInt(c)){double a = Character.getNumericValue(c); s.push(a); } else {double d = s.pop(); double b = s.pop(); switch(c) {case '+': System.out.println("Doing: "+b+" + "+d); result = b + d; System.out.println("Result of that = "+result); break; case '-': System.out.println("Doing: "+b+" - "+d); result = b - d; System.out.println("Result of that = "+result); break; case '/': System.out.println("Doing: "+b+" / "+d); result = b / d; System.out.println("Result of that = "+result); break; case '*': System.out.println("Doing: "+b+" * "+d); result = b*d; System.out.println("Result of that = "+result); break; case '^': System.out.println("Doing: "+b+" ^ "+d); result = Math.pow(b, d); System.out.println("Result of that = "+result); break; case '%': System.out.println("Doing: "+b+" % "+d); result = b % d; System.out.println("Result of that = "+result); break; } s.push(result); } } } catch (NullPointerException e) {System.out.println("You entered a bad postfix equation..."); } return result; } public static boolean isInt(char c) {if (c=='1'||c=='2'||c=='3'||c=='4'||c=='5'||c=='6'||c=='7'||c=='8'||c=='9'||c=='0') return true; return false; } public class MyLinkedListNode<E>{public MyLinkedListNode next; public E value; public MyLinkedListNode(E v) {value = v; next = null; } } }